{"version":3,"sources":["ng://angular-oauth2-oidc-jwks/lib/jwks-validation-handler.ts"],"names":["JwksValidationHandler","_this","_super","apply","this","arguments","allowedAlgorithms","gracePeriodInSec","__extends","prototype","validateSignature","params","retry","idToken","Error","idTokenHeader","jwks","Array","isArray","length","key","kid","keys","alg","find","k","kty_1","alg2kty","matchingKeys","filter","error","console","Promise","reject","loadKeys","then","loadedKeys","_","keyObj","rs.KEYUTIL","getKey","validationOptions","gracePeriod","rs.KJUR","jws","JWS","verifyJWT","resolve","charAt","calcHash","valueToHash","algorithm","result","crypto","MessageDigest","digestString","byteArrayAsString","toByteArrayAsString","hexString","i","hexDigit","num","parseInt","String","fromCharCode","AbstractValidationHandler"],"mappings":"4sBASA,SAAAA,IAAA,IAAAC,EAAA,OAAAC,GAAAA,EAAAC,MAAAC,KAAAC,YAAAD,YAIEH,EAAAK,kBAA8B,CAC5B,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,QACA,SAOFL,EAAAM,iBAAmB,MAsHrB,OA5I2CC,EAAAR,EAAAE,GAwBzCF,EAAAS,UAAAC,kBAAA,SAAkBC,EAA0BC,GAA5C,IAAAX,EAAAG,KACE,QAD0C,IAAAQ,IAAAA,GAAA,IACrCD,EAAOE,QAAS,MAAM,IAAIC,MAAM,+BACrC,IAAKH,EAAOI,cACV,MAAM,IAAID,MAAM,sCAClB,IAAKH,EAAOK,KAAM,MAAM,IAAIF,MAAM,4BAElC,IACGH,EAAOK,KAAW,OAClBC,MAAMC,QAAQP,EAAOK,KAAW,OACF,IAA/BL,EAAOK,KAAW,KAAEG,OAEpB,MAAM,IAAIL,MAAM,+BAKlB,IAEIM,EAFAC,EAAcV,EAAOI,cAAmB,IACxCO,EAAiBX,EAAOK,KAAW,KAGnCO,EAAMZ,EAAOI,cAAmB,IAEpC,GAAIM,EACFD,EAAME,EAAKE,MAAK,SAAAC,GAAK,OAAAA,EAAO,MAAMJ,SAC7B,CACL,IAAIK,EAAMtB,KAAKuB,QAAQJ,GACnBK,EAAeN,EAAKO,QACtB,SAAAJ,GAAK,OAAAA,EAAO,MAAMC,GAAoB,QAAbD,EAAO,OASlC,GAAIG,EAAaT,OAAS,EAAG,CAC3B,IAAIW,EACF,iFAEF,OADAC,QAAQD,MAAMA,GACPE,QAAQC,OAAOH,GACW,IAAxBF,EAAaT,SACtBC,EAAMQ,EAAa,IAIvB,IAAKR,IAAQR,GAASD,EAAOuB,SAC3B,OAAOvB,EACJuB,WACAC,MAAK,SAAAC,GAAc,OAACzB,EAAOK,KAAOoB,KAClCD,MAAK,SAAAE,GAAK,OAAApC,EAAKS,kBAAkBC,GAAQ,MAG9C,IAAKS,GAAOR,IAAUS,EAAK,CACrBS,EAAQ,yBAEZ,OADAC,QAAQD,MAAMA,GACPE,QAAQC,OAAOH,GAGxB,IAAKV,GAAOR,GAASS,EAAK,CACpBS,EACF,oIAIAT,EAGF,OADAU,QAAQD,MAAMA,GACPE,QAAQC,OAAOH,GAGxB,IAAIQ,EAASC,EAAAA,QAAWC,OAAOpB,GAC3BqB,EAAoB,CACtBlB,IAAKnB,KAAKE,kBACVoC,YAAatC,KAAKG,kBAQpB,OANcoC,EAAAA,KAAQC,IAAIC,IAAIC,UAC5BnC,EAAOE,QACPyB,EACAG,GAIOT,QAAQe,UAERf,QAAQC,OAAO,wBAIlBjC,EAAAS,UAAAkB,QAAR,SAAgBJ,GACd,OAAQA,EAAIyB,OAAO,IACjB,IAAK,IACH,MAAO,MACT,IAAK,IACH,MAAO,KACT,QACE,MAAM,IAAIlC,MAAM,8BAAgCS,KAItDvB,EAAAS,UAAAwC,SAAA,SAASC,EAAqBC,GAC5B,IACIC,EADU,IAAIT,EAAAA,KAAQU,OAAOC,cAAc,CAAE/B,IAAK4B,IACjCI,aAAaL,GAC9BM,EAAoBpD,KAAKqD,oBAAoBL,GACjD,OAAOpB,QAAQe,QAAQS,IAGzBxD,EAAAS,UAAAgD,oBAAA,SAAoBC,GAElB,IADA,IAAIN,EAAS,GACJO,EAAI,EAAGA,EAAID,EAAUvC,OAAQwC,GAAK,EAAG,CAC5C,IAAIC,EAAWF,EAAUV,OAAOW,GAAKD,EAAUV,OAAOW,EAAI,GACtDE,EAAMC,SAASF,EAAU,IAC7BR,GAAUW,OAAOC,aAAaH,GAEhC,OAAOT,GAEXpD,GA5I2CiE,EAAAA","sourcesContent":["import * as rs from 'jsrsasign';\r\nimport { AbstractValidationHandler, ValidationParams } from 'angular-oauth2-oidc';\r\n\r\n/**\r\n * Validates the signature of an id_token against one\r\n * of the keys of an JSON Web Key Set (jwks).\r\n *\r\n * This jwks can be provided by the discovery document.\r\n */\r\nexport class JwksValidationHandler extends AbstractValidationHandler {\r\n  /**\r\n   * Allowed algorithms\r\n   */\r\n  allowedAlgorithms: string[] = [\r\n    'HS256',\r\n    'HS384',\r\n    'HS512',\r\n    'RS256',\r\n    'RS384',\r\n    'RS512',\r\n    'ES256',\r\n    'ES384',\r\n    'PS256',\r\n    'PS384',\r\n    'PS512'\r\n  ];\r\n\r\n  /**\r\n   * Time period in seconds the timestamp in the signature can\r\n   * differ from the current time.\r\n   */\r\n  gracePeriodInSec = 600;\r\n\r\n  validateSignature(params: ValidationParams, retry = false): Promise<any> {\r\n    if (!params.idToken) throw new Error('Parameter idToken expected!');\r\n    if (!params.idTokenHeader)\r\n      throw new Error('Parameter idTokenHandler expected.');\r\n    if (!params.jwks) throw new Error('Parameter jwks expected!');\r\n\r\n    if (\r\n      !params.jwks['keys'] ||\r\n      !Array.isArray(params.jwks['keys']) ||\r\n      params.jwks['keys'].length === 0\r\n    ) {\r\n      throw new Error('Array keys in jwks missing!');\r\n    }\r\n\r\n    // console.debug('validateSignature: retry', retry);\r\n\r\n    let kid: string = params.idTokenHeader['kid'];\r\n    let keys: object[] = params.jwks['keys'];\r\n    let key: object;\r\n\r\n    let alg = params.idTokenHeader['alg'];\r\n\r\n    if (kid) {\r\n      key = keys.find(k => k['kid'] === kid /* && k['use'] === 'sig' */);\r\n    } else {\r\n      let kty = this.alg2kty(alg);\r\n      let matchingKeys = keys.filter(\r\n        k => k['kty'] === kty && k['use'] === 'sig'\r\n      );\r\n\r\n      /*\r\n            if (matchingKeys.length == 0) {\r\n                let error = 'No matching key found.';\r\n                console.error(error);\r\n                return Promise.reject(error);\r\n            }*/\r\n      if (matchingKeys.length > 1) {\r\n        let error =\r\n          'More than one matching key found. Please specify a kid in the id_token header.';\r\n        console.error(error);\r\n        return Promise.reject(error);\r\n      } else if (matchingKeys.length === 1) {\r\n        key = matchingKeys[0];\r\n      }\r\n    }\r\n\r\n    if (!key && !retry && params.loadKeys) {\r\n      return params\r\n        .loadKeys()\r\n        .then(loadedKeys => (params.jwks = loadedKeys))\r\n        .then(_ => this.validateSignature(params, true));\r\n    }\r\n\r\n    if (!key && retry && !kid) {\r\n      let error = 'No matching key found.';\r\n      console.error(error);\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    if (!key && retry && kid) {\r\n      let error =\r\n        'expected key not found in property jwks. ' +\r\n        'This property is most likely loaded with the ' +\r\n        'discovery document. ' +\r\n        'Expected key id (kid): ' +\r\n        kid;\r\n\r\n      console.error(error);\r\n      return Promise.reject(error);\r\n    }\r\n\r\n    let keyObj = rs.KEYUTIL.getKey(key);\r\n    let validationOptions = {\r\n      alg: this.allowedAlgorithms,\r\n      gracePeriod: this.gracePeriodInSec\r\n    };\r\n    let isValid = rs.KJUR.jws.JWS.verifyJWT(\r\n      params.idToken,\r\n      keyObj,\r\n      validationOptions\r\n    );\r\n\r\n    if (isValid) {\r\n      return Promise.resolve();\r\n    } else {\r\n      return Promise.reject('Signature not valid');\r\n    }\r\n  }\r\n\r\n  private alg2kty(alg: string) {\r\n    switch (alg.charAt(0)) {\r\n      case 'R':\r\n        return 'RSA';\r\n      case 'E':\r\n        return 'EC';\r\n      default:\r\n        throw new Error('Cannot infer kty from alg: ' + alg);\r\n    }\r\n  }\r\n\r\n  calcHash(valueToHash: string, algorithm: string): Promise<string> {\r\n    let hashAlg = new rs.KJUR.crypto.MessageDigest({ alg: algorithm });\r\n    let result = hashAlg.digestString(valueToHash);\r\n    let byteArrayAsString = this.toByteArrayAsString(result);\r\n    return Promise.resolve(byteArrayAsString);\r\n  }\r\n\r\n  toByteArrayAsString(hexString: string) {\r\n    let result = '';\r\n    for (let i = 0; i < hexString.length; i += 2) {\r\n      let hexDigit = hexString.charAt(i) + hexString.charAt(i + 1);\r\n      let num = parseInt(hexDigit, 16);\r\n      result += String.fromCharCode(num);\r\n    }\r\n    return result;\r\n  }\r\n}"]}