{"version":3,"file":"mat-select-search.component.d.ts","sources":["mat-select-search.component.d.ts"],"names":[],"mappingssourcesContent":["/**\r\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nimport { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit, QueryList } from '@angular/core';\r\nimport { ControlValueAccessor, FormControl } from '@angular/forms';\r\nimport { MatOption } from '@angular/material/core';\r\nimport { MatSelect } from '@angular/material/select';\r\nimport { MatFormField } from '@angular/material/form-field';\r\nimport { ViewportRuler } from '@angular/cdk/scrolling';\r\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\r\n/**\r\n * Component providing an input field for searching MatSelect options.\r\n *\r\n * Example usage:\r\n *\r\n * interface Bank {\r\n *  id: string;\r\n *  name: string;\r\n * }\r\n *\r\n * @Component({\r\n *   selector: 'my-app-data-selection',\r\n *   template: `\r\n *     <mat-form-field>\r\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\r\n *         <mat-option>\r\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\r\n *         </mat-option>\r\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\r\n *           {{bank.name}}\r\n *         </mat-option>\r\n *       </mat-select>\r\n *     </mat-form-field>\r\n *   `\r\n * })\r\n * export class DataSelectionComponent implements OnInit, OnDestroy {\r\n *\r\n *   // control for the selected bank\r\n *   public bankCtrl: FormControl = new FormControl();\r\n *   // control for the MatSelect filter keyword\r\n *   public bankFilterCtrl: FormControl = new FormControl();\r\n *\r\n *   // list of banks\r\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\r\n *   // list of banks filtered by search keyword\r\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\r\n *\r\n *   // Subject that emits when the component has been destroyed.\r\n *   private _onDestroy = new Subject<void>();\r\n *\r\n *\r\n *   ngOnInit() {\r\n *     // load the initial bank list\r\n *     this.filteredBanks.next(this.banks.slice());\r\n *     // listen for search field value changes\r\n *     this.bankFilterCtrl.valueChanges\r\n *       .pipe(takeUntil(this._onDestroy))\r\n *       .subscribe(() => {\r\n *         this.filterBanks();\r\n *       });\r\n *   }\r\n *\r\n *   ngOnDestroy() {\r\n *     this._onDestroy.next();\r\n *     this._onDestroy.complete();\r\n *   }\r\n *\r\n *   private filterBanks() {\r\n *     if (!this.banks) {\r\n *       return;\r\n *     }\r\n *\r\n *     // get the search keyword\r\n *     let search = this.bankFilterCtrl.value;\r\n *     if (!search) {\r\n *       this.filteredBanks.next(this.banks.slice());\r\n *       return;\r\n *     } else {\r\n *       search = search.toLowerCase();\r\n *     }\r\n *\r\n *     // filter the banks\r\n *     this.filteredBanks.next(\r\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\r\n *     );\r\n *   }\r\n * }\r\n */\r\nexport declare class MatSelectSearchComponent implements OnInit, OnDestroy, ControlValueAccessor {\r\n    matSelect: MatSelect;\r\n    changeDetectorRef: ChangeDetectorRef;\r\n    private _viewportRuler;\r\n    matOption: MatOption;\r\n    private liveAnnouncer;\r\n    matFormField: MatFormField;\r\n    /** Label of the search placeholder */\r\n    placeholderLabel: string;\r\n    /** Type of the search input field */\r\n    type: string;\r\n    /** Label to be shown when no entries are found. Set to null if no message should be shown. */\r\n    noEntriesFoundLabel: string;\r\n    /**\r\n     *  Text that is appended to the currently active item label announced by screen readers,\r\n     *  informing the user of the current index, value and total options.\r\n     *  eg: Bank R (Germany) 1 of 6\r\n    */\r\n    indexAndLengthScreenReaderText: string;\r\n    /**\r\n      * Whether or not the search field should be cleared after the dropdown menu is closed.\r\n      * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\r\n      */\r\n    clearSearchInput: boolean;\r\n    /** Whether to show the search-in-progress indicator */\r\n    searching: boolean;\r\n    /** Disables initial focusing of the input field */\r\n    disableInitialFocus: boolean;\r\n    /** Enable clear input on escape pressed */\r\n    enableClearOnEscapePressed: boolean;\r\n    /**\r\n     * Prevents home / end key being propagated to mat-select,\r\n     * allowing to move the cursor within the search input instead of navigating the options\r\n     */\r\n    preventHomeEndKeyPropagation: boolean;\r\n    /** Disables scrolling to active options when option list changes. Useful for server-side search */\r\n    disableScrollToActiveOnOptionsChanged: boolean;\r\n    /** Adds 508 screen reader support for search box */\r\n    ariaLabel: string;\r\n    /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\r\n    showToggleAllCheckbox: boolean;\r\n    /** select all checkbox checked state */\r\n    toggleAllCheckboxChecked: boolean;\r\n    /** select all checkbox indeterminate state */\r\n    toggleAllCheckboxIndeterminate: boolean;\r\n    /** Display a message in a tooltip on the toggle-all checkbox */\r\n    toggleAllCheckboxTooltipMessage: string;\r\n    /** Define the position of the tooltip on the toggle-all checkbox. */\r\n    toogleAllCheckboxTooltipPosition: 'left' | 'right' | 'above' | 'below' | 'before' | 'after';\r\n    /** Output emitter to send to parent component with the toggle all boolean */\r\n    toggleAll: EventEmitter<boolean>;\r\n    /** Reference to the search input field */\r\n    searchSelectInput: ElementRef;\r\n    /** Reference to the search input field */\r\n    innerSelectSearch: ElementRef;\r\n    /** Reference to custom search input clear icon */\r\n    clearIcon: MatSelectSearchClearDirective;\r\n    readonly isInsideMatOption: boolean;\r\n    /** Current search value */\r\n    readonly value: string;\r\n    private _lastExternalInputValue;\r\n    onTouched: Function;\r\n    /** Reference to the MatSelect options */\r\n    _options: QueryList<MatOption>;\r\n    _options$: BehaviorSubject<QueryList<MatOption>>;\r\n    private optionsList$;\r\n    private optionsLength$;\r\n    /** Previously selected values when using <mat-select [multiple]=\"true\">*/\r\n    private previousSelectedValues;\r\n    _formControl: FormControl;\r\n    /** whether to show the no entries found message */\r\n    _showNoEntriesFound$: Observable<boolean>;\r\n    /** Subject that emits when the component has been destroyed. */\r\n    private _onDestroy;\r\n    constructor(matSelect: MatSelect, changeDetectorRef: ChangeDetectorRef, _viewportRuler: ViewportRuler, matOption: MatOption, liveAnnouncer: LiveAnnouncer, matFormField?: MatFormField);\r\n    ngOnInit(): void;\r\n    _emitSelectAllBooleanToParent(state: boolean): void;\r\n    ngOnDestroy(): void;\r\n    _isToggleAllCheckboxVisible(): boolean;\r\n    /**\r\n     * Handles the key down event with MatSelect.\r\n     * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\r\n     * @param event\r\n     */\r\n    _handleKeydown(event: KeyboardEvent): void;\r\n    /**\r\n     * Handles the key up event with MatSelect.\r\n     * Allows e.g. the announcing of the currently activeDescendant by screen readers.\r\n     */\r\n    _handleKeyup(event: KeyboardEvent): void;\r\n    /**\r\n     * Calculate the index of the current option, taking the offset to length into account.\r\n     * examples:\r\n     *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\r\n     *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\r\n     */\r\n    getAriaIndex(optionIndex: number): number;\r\n    /**\r\n     * Calculate the length of the options, taking the offset to length into account.\r\n     * examples:\r\n     *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\r\n     *    Case 2 [1, 2, 3] will have length of options.length.\r\n     */\r\n    getAriaLength(): number;\r\n    writeValue(value: string): void;\r\n    onBlur(): void;\r\n    registerOnChange(fn: (value: string) => void): void;\r\n    registerOnTouched(fn: Function): void;\r\n    /**\r\n     * Focuses the search input field\r\n     */\r\n    _focus(): void;\r\n    /**\r\n     * Resets the current search value\r\n     * @param focus whether to focus after resetting\r\n     */\r\n    _reset(focus?: boolean): void;\r\n    /**\r\n     * Initializes handling <mat-select [multiple]=\"true\">\r\n     * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\r\n     */\r\n    private initMultipleHandling;\r\n    /**\r\n     * Scrolls the currently active option into the view if it is not yet visible.\r\n     */\r\n    private adjustScrollTopToFitActiveOptionIntoView;\r\n    /**\r\n     *  Set the width of the innerSelectSearch to fit even custom scrollbars\r\n     *  And support all Operation Systems\r\n     */\r\n    updateInputWidth(): void;\r\n    private getMatOptionHeight;\r\n    /**\r\n     * Determine the offset to length that can be caused by the optional matOption used as a search input.\r\n     */\r\n    private getOptionsLengthOffset;\r\n}\r\n"]}