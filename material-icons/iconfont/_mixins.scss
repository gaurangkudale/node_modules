// see https://github.com/twbs/bootstrap/blob/main/scss/_functions.scss
@function material-icons-str-replace($string, $search, $replace: '') {
  $index: str-index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace +
      material-icons-str-replace(
        str-slice($string, $index + str-length($search)),
        $search,
        $replace
      );
  }
  @return $string;
}

// see https://stackoverflow.com/a/62698329
@function material-icons-str-trim($string) {
  @if (str-slice($string, 1, 1) == ' ') {
    @return material-icons-str-trim(str-slice($string, 2));
  } @else if (str-slice($string, str-length($string), -1) == ' ') {
    @return material-icons-str-trim(str-slice($string, 1, -2));
  } @else {
    @return $string;
  }
}

@function material-icons-kebab-case($string) {
  $string: to-lower-case($string);
  $string: material-icons-str-trim($string);
  @return material-icons-str-replace($string, ' ', '-');
}

@function material-icons-content($codepoint) {
  @return unquote('"\\#{$codepoint}"');
}

@mixin material-icons-font-face($font-family) {
  $font-file: $material-icons-font-path +
    material-icons-kebab-case($font-family);

  @font-face {
    font-family: $font-family;
    font-style: normal;
    font-weight: 400;
    font-display: $material-icons-font-display;
    src: url('#{$font-file}.woff2') format('woff2'),
      url('#{$font-file}.woff') format('woff');
  }
}

%material-icons {
  font-weight: normal;
  font-style: normal;
  font-size: $material-icons-font-size;
  line-height: 1;
  letter-spacing: normal;
  text-transform: none;
  display: inline-block;
  white-space: nowrap;
  word-wrap: normal;
  direction: ltr;
  -webkit-font-smoothing: antialiased; // Support for all WebKit browsers
  -moz-osx-font-smoothing: grayscale; // Support for Firefox
  text-rendering: optimizeLegibility; // Support for Safari and Chrome
  font-feature-settings: 'liga'; // Support for IE
}

@mixin material-icons($font-family) {
  @extend %material-icons;
  font-family: $font-family;
}

@mixin material-icon($name, $pseudo: 'before') {
  $codepoint: map-get($material-icons-codepoints, $name);

  &:#{$pseudo} {
    content: material-icons-content($codepoint);
  }
}
